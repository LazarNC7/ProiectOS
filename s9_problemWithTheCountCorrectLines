#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include <time.h>
#include <stddef.h>
#include <sys/wait.h>
#include <libgen.h>

#pragma pack(push,1)
typedef struct {
    char signature[2];
    int32_t size;
    int32_t reserved;
    int32_t data_offset;
    int32_t header_size;
    int32_t width;
    int32_t height;
    int16_t planes;
    int16_t bcnt;
    int32_t compression;
    int32_t image_size;
    int32_t x_resolution;
    int32_t y_resolution;
    int32_t num_colors;
    int32_t important_colors;
} Header;
#pragma pack(pop)

int isBMPFile(const Header *header) {
    return (header->signature[0] == 'B' && header->signature[1] == 'M');
}

int isBMPFilePath(const char *file_path) {
    int inp;
    Header header;

    if ((inp = open(file_path, O_RDONLY)) == -1) {
        perror("Error opening input file");
        exit(2);
    }

    if (read(inp, &header, sizeof(Header)) != sizeof(Header) || 
        header.signature[0] != 'B' || header.signature[1] != 'M') {
        close(inp);
        return 0; 
    }

    close(inp);
    return 1; 
}

int isDirectory(const char *path) {
    struct stat info;
    if (stat(path, &info) != 0) {
        perror("Error getting file information");
        exit(2);
    }
    return S_ISDIR(info.st_mode);
}

int isRegularFile(const char *path) {
    struct stat info;
    if (lstat(path, &info) != 0) {
        perror("Error getting file information");
        exit(2);
    }
    return S_ISREG(info.st_mode) && !S_ISLNK(info.st_mode);
}

int isNonBMPFile(const char *path) {
    if (isRegularFile(path)) {
        size_t path_len = strlen(path);
        return (path_len < 4 || (strcmp(path + path_len - 4, ".bmp") != 0));
    }
    return 0;
}

int isSymbolicLink(const char *path) {
    struct stat info;
    if (lstat(path, &info) != 0) {
        perror("Error getting file information");
        exit(2);
    }
    return S_ISLNK(info.st_mode);
}

void statistics(const char *file, const char* output_dir) {
    int inp, out;
    struct stat info;
    char statistics[500];

    if ((inp = open(file, O_RDONLY)) == -1) {
        perror("Error opening input file");
        exit(2);
    }

    if (fstat(inp, &info) == -1) {
        perror("Error getting file information");
        close(inp);
        exit(2);
    }

    Header header;
    if (read(inp, &header, sizeof(Header)) != sizeof(Header) || !isBMPFile(&header)) {
        fprintf(stderr, "The input file is not a BMP file.\n");
        exit(5);
    }

    

    int width = *(int*)((char*)&header + 18);
    int height = *(int*)((char*)&header + 22);
    int permissions = info.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO);
    char perms[10];
    sprintf(perms, "%o", permissions);

    snprintf(statistics, sizeof(statistics),
        "Nume fisier: %s\nInaltime: %d\nLungime: %d\nDimensiune: %d\nIdentificatorul utilizatorului: %d\nTimpul ultimei modificari: %sContorul de legaturi: %ld\nDrepturi de acces user: %s\nDrepturi de acces grup: %s\nDrepturi de acces altii: %s\n",
        file, height, width, (int)info.st_size, info.st_uid, ctime(&info.st_mtime), info.st_nlink,(perms[0] == '7') ? "RWX" : ((perms[0] == '6') ? "RW-" : ((perms[0] == '5') ? "R-X" : ((perms[0] == '4') ? "R--" : ((perms[0] == '3') ? "-WX" : ((perms[0] == '2') ? "-W-" : ((perms[0] == '1') ? "--X" : "---")))))),
        (perms[1] == '7') ? "RWX" : ((perms[1] == '6') ? "RW-" : ((perms[1] == '5') ? "R-X" : ((perms[1] == '4') ? "R--" : ((perms[1] == '3') ? "-WX" : ((perms[1] == '2') ? "-W-" : ((perms[1] == '1') ? "--X" : "---")))))),
	     (perms[2] == '7') ? "RWX" : ((perms[2] == '6') ? "RW-" : ((perms[2] == '5') ? "R-X" : ((perms[2] == '4') ? "R--" : ((perms[2] == '3') ? "-WX" : ((perms[2] == '2') ? "-W-" : ((perms[2] == '1') ? "--X" : "---")))))));

    char output_file[PATH_MAX];
    char aux[100];
    int i=0;
    char *last_occurrence = strrchr(file,'/');
    strcpy(aux, last_occurrence+1);
    for(i=0;i<strlen(aux)&&aux[i]!='.';i++){
        aux[i]=aux[i];
    }
    aux[i]='\0';
    snprintf(output_file, sizeof(output_file), "%s/%s_statistica.txt", output_dir, aux);
    

    out = open(output_file, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (out == -1) {
        perror("Error opening output file");
        close(inp);
        exit(EXIT_FAILURE);
    }

    if (write(out, statistics, strlen(statistics)) == -1) {
        perror("Error writing to output file");
    }

    close(inp);
    close(out);
}

void statisticsDirectory(const char *file,const char* output_dir) {
    int inp, out;
    struct stat info;
    char statistics[500];

    if ((inp = open(file, O_RDONLY)) == -1) {
        perror("Error opening input file");
        exit(2);
    }

    if (fstat(inp, &info) == -1) {
        perror("Error getting file information");
        close(inp);
        exit(2);
    }

    
int permissions = info.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO);
    char perms[10];
    sprintf(perms, "%o", permissions);

    snprintf(statistics, sizeof(statistics),
        "Nume director: %s\nIdentificatorul utilizatorului: %d\nDrepturi de acces user: %s\nDrepturi de acces grup: %s\nDrepturi de acces altii: %s\n",
        file,  info.st_uid,(perms[0] == '7') ? "RWX" : ((perms[0] == '6') ? "RW-" : ((perms[0] == '5') ? "R-X" : ((perms[0] == '4') ? "R--" : ((perms[0] == '3') ? "-WX" : ((perms[0] == '2') ? "-W-" : ((perms[0] == '1') ? "--X" : "---")))))),
        (perms[1] == '7') ? "RWX" : ((perms[1] == '6') ? "RW-" : ((perms[1] == '5') ? "R-X" : ((perms[1] == '4') ? "R--" : ((perms[1] == '3') ? "-WX" : ((perms[1] == '2') ? "-W-" : ((perms[1] == '1') ? "--X" : "---")))))),
	     (perms[2] == '7') ? "RWX" : ((perms[2] == '6') ? "RW-" : ((perms[2] == '5') ? "R-X" : ((perms[2] == '4') ? "R--" : ((perms[2] == '3') ? "-WX" : ((perms[2] == '2') ? "-W-" : ((perms[2] == '1') ? "--X" : "---")))))));

    char output_file[PATH_MAX];
    char aux[100];
    int i=0;
    char *last_occurrence = strrchr(file,'/');
    strcpy(aux, last_occurrence+1);
    for(i=0;i<strlen(aux)&&aux[i]!='.';i++){
        aux[i]=aux[i];
    }
    aux[i]='\0';
    snprintf(output_file, sizeof(output_file), "%s/%s_statistica.txt", output_dir, aux);
    

    out = open(output_file, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (out == -1) {
        perror("Error opening output file");
        close(inp);
        exit(EXIT_FAILURE);
    }

    if (write(out, statistics, strlen(statistics)) == -1) {
        perror("Error writing to output file");
    }

    close(inp);
    close(out);
}
void convertToGrayscale(const char *file_path) {
    int inp;
    Header header;

    if ((inp = open(file_path, O_RDWR)) == -1) {
        perror("Error opening input file");
        exit(2);
    }

    if (read(inp, &header, sizeof(Header)) != sizeof(Header) || !isBMPFile(&header)) {
        fprintf(stderr, "The input file is not a BMP file.\n");
        close(inp);
        exit(5);
    }

    int width = header.width;
    int height = header.height;
    

    unsigned char pixel[3];
    lseek(inp, header.data_offset, SEEK_SET);

    for (int y = 0; y < height; ++y) {
    for (int x = 0; x < width; ++x) {
      read(inp, pixel, sizeof(pixel));
           

        unsigned char gray = (unsigned char)(0.299 * pixel[2] + 0.587 * pixel[1] + 0.114 * pixel[0]);

        
        lseek(inp, -3, SEEK_CUR);  
        pixel[0] = pixel[1] = pixel[2] = gray;
	//		printf("%s %d %d %d\n",file_path, pixel[2],pixel[1],pixel[0]);
        if (write(inp, pixel, sizeof(pixel)) != sizeof(pixel)) {
            perror("Error writing pixel");
            close(inp);
            exit(7);
        }

  
    }
}


    close(inp);
}

void statisticsRegFile(const char *file,const char* output_dir) {
    int inp, out;
    struct stat info;
    char statistics[500];

    if ((inp = open(file, O_RDONLY)) == -1) {
        perror("Error opening input file");
        exit(2);
    }

    if (fstat(inp, &info) == -1) {
        perror("Error getting file information");
        close(inp);
        exit(2);
    }

    

    int permissions = info.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO);
    char perms[10];
    sprintf(perms, "%o", permissions);

    snprintf(statistics, sizeof(statistics),
        "Nume fisier: %s\nDimensiune: %d\nIdentificatorul utilizatorului: %d\nTimpul ultimei modificari: %sContorul de legaturi: %ld\nDrepturi de acces user: %s\nDrepturi de acces grup: %s\nDrepturi de acces altii: %s\n",
        file,  (int)info.st_size, info.st_uid, ctime(&info.st_mtime), info.st_nlink,(perms[0] == '7') ? "RWX" : ((perms[0] == '6') ? "RW-" : ((perms[0] == '5') ? "R-X" : ((perms[0] == '4') ? "R--" : ((perms[0] == '3') ? "-WX" : ((perms[0] == '2') ? "-W-" : ((perms[0] == '1') ? "--X" : "---")))))),
        (perms[1] == '7') ? "RWX" : ((perms[1] == '6') ? "RW-" : ((perms[1] == '5') ? "R-X" : ((perms[1] == '4') ? "R--" : ((perms[1] == '3') ? "-WX" : ((perms[1] == '2') ? "-W-" : ((perms[1] == '1') ? "--X" : "---")))))),
	     (perms[2] == '7') ? "RWX" : ((perms[2] == '6') ? "RW-" : ((perms[2] == '5') ? "R-X" : ((perms[2] == '4') ? "R--" : ((perms[2] == '3') ? "-WX" : ((perms[2] == '2') ? "-W-" : ((perms[2] == '1') ? "--X" : "---")))))));

    char output_file[PATH_MAX];
    char aux[100];
    int i=0;
    char *last_occurrence = strrchr(file,'/');
    strcpy(aux, last_occurrence+1);
    for(i=0;i<strlen(aux)&&aux[i]!='.';i++){
        aux[i]=aux[i];
    }
    aux[i]='\0';
    snprintf(output_file, sizeof(output_file), "%s/%s_statistica.txt", output_dir, aux);
    

    out = open(output_file, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (out == -1) {
        perror("Error opening output file");
        close(inp);
        exit(EXIT_FAILURE);
    }

    if (write(out, statistics, strlen(statistics)) == -1) {
        perror("Error writing to output file");
    }

    close(inp);
    close(out);
}



void statisticsSymbolicFile(const char *file, const char *output_dir) {
    int inp, out;
    struct stat info;
    char statistics[500];

    const char *symbolicLinkPath = file;
    char targetFilePath[100];

    ssize_t targetPathLength = readlink(symbolicLinkPath, targetFilePath, sizeof(targetFilePath) - 1);
    if (targetPathLength == -1) {
        perror("readlink");
        exit(EXIT_FAILURE);
    }
    targetFilePath[targetPathLength] = '\0';

    if (lstat(targetFilePath, &info) == -1) {
        perror("lstat");
        exit(EXIT_FAILURE);
    }

    if ((inp = open(symbolicLinkPath, O_RDONLY)) == -1) {
        perror("Error opening input file");
        exit(EXIT_FAILURE);
    }

    if (fstat(inp, &info) == -1) {
        perror("Error getting file information");
        close(inp);
        exit(EXIT_FAILURE);
    }

    int permissions = info.st_mode & (S_IRWXU | S_IRWXG | S_IRWXO);
    char perms[10];
    sprintf(perms, "%o", permissions);

    snprintf(statistics, sizeof(statistics),
             "Nume legatura: %s\nDimensiune: %d\nDimensiune fisier target: %d\nDrepturi de acces user: %s\nDrepturi de acces grup: %s\nDrepturi de acces altii: %s\n",
             file, (int)info.st_size, (int)info.st_nlink, (perms[0] == '7') ? "RWX" : ((perms[0] == '6') ? "RW-" : ((perms[0] == '5') ? "R-X" : ((perms[0] == '4') ? "R--" : ((perms[0] == '3') ? "-WX" : ((perms[0] == '2') ? "-W-" : ((perms[0] == '1') ? "--X" : "---")))))),
             (perms[1] == '7') ? "RWX" : ((perms[1] == '6') ? "RW-" : ((perms[1] == '5') ? "R-X" : ((perms[1] == '4') ? "R--" : ((perms[1] == '3') ? "-WX" : ((perms[1] == '2') ? "-W-" : ((perms[1] == '1') ? "--X" : "---")))))),
             (perms[2] == '7') ? "RWX" : ((perms[2] == '6') ? "RW-" : ((perms[2] == '5') ? "R-X" : ((perms[2] == '4') ? "R--" : ((perms[2] == '3') ? "-WX" : ((perms[2] == '2') ? "-W-" : ((perms[2] == '1') ? "--X" : "---")))))));

    char output_file[PATH_MAX];
    char aux[100];
    int i = 0;
    char *last_occurrence = strrchr(file, '/');
    strcpy(aux, last_occurrence + 1);
    for (i = 0; i < strlen(aux) && aux[i] != '.'; i++) {
        aux[i] = aux[i];
    }
    aux[i] = '\0';
    snprintf(output_file, sizeof(output_file), "%s/%s_statistica.txt", output_dir, aux);

    out = open(output_file, O_WRONLY | O_CREAT | O_APPEND, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (out == -1) {
        perror("Error opening output file");
        close(inp);
        exit(EXIT_FAILURE);
    }

    if (write(out, statistics, strlen(statistics)) == -1) {
        perror("Error writing to output file");
    }

    close(inp);
    close(out);
}

void countLines(const char *file_path) {
    // Creează un fișier temporar pentru a stoca rezultatul numărării liniilor
    FILE *temp_file = tmpfile();

    if (temp_file == NULL) {
        perror("Error creating temporary file");
        exit(1);
    }

    pid_t pid = fork();
    if (pid == 0) {
        // Redirecționează ieșirea comenzii wc -l către fișierul temporar
        dup2(fileno(temp_file), STDOUT_FILENO); // Utilizează fileno pentru a obține descriptorul de fișier al fișierului temporar

        // Execută comanda wc -l pentru a număra liniile fișierului
        printf("%d\n",execlp("wc", "wc", "-l", file_path, NULL));

        // În caz de eroare la execuția comenzii, afișează un mesaj și iese
        perror("Error executing wc -l");
        exit(1);
    } else if (pid > 0) {
        int status;
        waitpid(pid, &status, 0);
        if (WIFEXITED(status)) {
            if (WEXITSTATUS(status) == 0) {
                // Repositionează cursorul la începutul fișierului temporar
                rewind(temp_file);

                int line_count;
                fscanf(temp_file, "%d", &line_count);
                printf("Au fost identificate in total %d linii în fișierul %s\n", line_count, file_path);
            } else {
                printf("S-a încheiat procesul de numărare cu codul %d\n", WEXITSTATUS(status));
            }
        }
    } else {
        perror("Error creating child process for counting");
    }

    // Închide fișierul temporar după utilizare
    fclose(temp_file);
}

void countCorrectSentences(const char *content, char character, int pipe_fd) {
  printf("count\n");
  FILE *fp;
  char path[1035];
  fp = popen("bash scriptS9.sh", "r");
  if (fp == NULL) {
    perror("Error executing script");
    exit(1);
  }
  // Se scrie conținutul într-un fișier temporar
  FILE *temp_file = tmpfile();
  fprintf(temp_file, "%s", content);
  fseek(temp_file, 0, SEEK_SET);
  // Se citește conținutul fișierului temporar și se trimite către scriptul Bash
  while (fgets(path, sizeof(path) - 1, temp_file) != NULL) {
    fprintf(fp, "%s", path);
  }
  fclose(temp_file);
  // Se citește rezultatul de la scriptul Bash
  int count;
  fscanf(fp, "%d", &count);
  // Se trimite rezultatul către procesul părinte prin pipe
  write(pipe_fd, &count, sizeof(count));
  pclose(fp);
}



void processEntry(const char *entry, const char *inputDir, const char *outputDir, char character) {
  char file_path[PATH_MAX];
    snprintf(file_path, sizeof(file_path), "%s/%s", inputDir, entry);
    
    if (isDirectory(file_path)) {
      if (strcmp(entry, ".") != 0 && strcmp(entry, "..") != 0) {
	// Procesează directorul recursiv
	statisticsDirectory(file_path, outputDir);
      }
    } else if (isRegularFile(file_path)) {
      // Creează un proces fiu pentru fiecare fișier
      pid_t pid = fork();
      if (pid == 0) {
	int pipe_fd1[2];
        if (pipe(pipe_fd1) == -1) {
            perror("Error creating pipe");
            exit(1);
        }
        char file_path[PATH_MAX];
    snprintf(file_path, sizeof(file_path), "%s/%s", inputDir, entry);

    char *base_name = basename(strdup(file_path));
    char *dot_position = strrchr(base_name, '.');

    if (dot_position != NULL) {
        *dot_position = '\0';
    }

    char output_file[PATH_MAX];
    snprintf(output_file, sizeof(output_file), "%s/%s_statistica.txt", outputDir, base_name);

    printf("Numele fișierului de ieșire: %s\n", output_file);
        countLines(output_file);
	// În interiorul procesului fiu
	// Procesează acțiunile specifice pentru fișier
	if (isBMPFilePath(file_path)) {
	  // Execută operațiuni pentru fișierul BMP
	  statistics(file_path, outputDir);
	  convertToGrayscale(file_path);
	} else if (isNonBMPFile(file_path)) {
	  // Execută operațiuni pentru fișierele non-BMP
	  statisticsRegFile(file_path, outputDir);
	  
	  // Procesul fiu pentru numărarea propozițiilor
	  int pipe_fd[2];
	  if (pipe(pipe_fd) == -1) {
	    perror("Error creating pipe");
	    exit(1);
	  }
	  pid_t count_pid = fork();
	  if (count_pid == 0) {
	    // În interiorul procesului fiu pentru numărare
	    close(pipe_fd[0]); // Închide partea de citire a pipe-ului
	    // Obține conținutul fișierului
	    char content[1024]; // Dimensiunea poate fi ajustată
	    FILE *fp = fopen(file_path, "r");
	    fread(content, sizeof(char), sizeof(content), fp);
	    fclose(fp);
	    // Procesează conținutul pentru a număra propozițiile corecte
	    countCorrectSentences(content, character, pipe_fd[1]);
	    close(pipe_fd[1]); // Închide partea de scriere a pipe-ului
	    exit(0);
	  } else if (count_pid > 0) {
	    // În interiorul procesului părinte
	    close(pipe_fd[1]); // Închide partea de scriere a pipe-ului
	    int count;
	    read(pipe_fd[0], &count, sizeof(count));
	    printf("Au fost identificate in total %d propozitii corecte care contin caracterul %c\n", count, character);
	    close(pipe_fd[0]); // Închide partea de citire a pipe-ului
	    int status;
	    waitpid(count_pid, &status, 0);
	    if (WIFEXITED(status)) {
	      printf("S-a incheiat procesul de numarare cu codul %d\n", WEXITSTATUS(status));
	    }
	  } else {
	    perror("Error creating child process for counting");
	  }
	}
	exit(0);
      } else if (pid > 0) {
	// În interiorul procesului părinte
	int status;
	waitpid(pid, &status, 0);
	if (WIFEXITED(status)) {
	  printf("S-a incheiat procesul cu pid-ul %d si codul %d\n", (int)pid, WEXITSTATUS(status));
	}
      } else {
	perror("Error creating child process for entry processing");
      }
    } else if (isSymbolicLink(file_path)) {
      // Execută operații pentru link-uri simbolice
      statisticsSymbolicFile(file_path, outputDir);
    }
}







void processDirectory(const char *inputDir, const char *outputDir, char c) {
    DIR *dir = opendir(inputDir);
    if (!dir) {
        perror("Error opening directory");
        exit(4);
    }

    struct dirent *entry;
    while ((entry = readdir(dir)) != NULL) {
        pid_t pid = fork();
        if (pid == 0) {
	  processEntry(entry->d_name, inputDir, outputDir,c);
            exit(0);
        } else if (pid < 0) {
            perror("Error creating child process for entry processing");
        }
    }

    int status;
    pid_t wpid;
    while ((wpid = waitpid(-1, &status, 0)) > 0) {
        if (WIFEXITED(status)) {
            printf("S-a încheiat procesul cu pid-ul %d și codul %d\n", (int)wpid, WEXITSTATUS(status));
        }
    }

    closedir(dir);
}

int main(int argc, char *args[]) {
    if (argc != 4) {
        printf("Usage: %s <input_directory> <output_directory <character>\n", args[0]);
        exit(1);
    }

    char c=args[3][0];
    processDirectory(args[1], args[2], c);

    return 0;
}
